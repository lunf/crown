package ${packageName}.controller;

import java.util.List;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.crown.common.annotation.Log;
import org.crown.common.enums.BusinessType;
import org.crown.common.utils.StringUtils;
import org.crown.common.utils.poi.ExcelUtils;
import org.crown.framework.model.ExcelDTO;
import org.crown.framework.web.controller.WebController;
import org.crown.framework.web.page.TableData;
import ${packageName}.domain.${ClassName};
import org.crown.project.${moduleName}.${businessName}.service.I${ClassName}Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.baomidou.mybatisplus.core.toolkit.Wrappers;

/**
 * ${functionName}Information handling
 *
 * @author ${author}
 */
@Controller
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends WebController<${ClassName}> {

	private final String prefix = "${moduleName}/${businessName}";

	@Autowired
	private I${ClassName}Service ${businessName}Service;

	@RequiresPermissions("${moduleName}:${businessName}:view")
	@GetMapping
	public String ${businessName}() {
		return prefix + "/${businessName}";
	}

	/**
     * 查询${functionName}List
     */
	@RequiresPermissions("${moduleName}:${businessName}:list")
	@PostMapping("/list")
	@ResponseBody
	public TableData<${ClassName}> list(${ClassName} ${businessName}) {
		startPage();
		List<${ClassName}> list = ${businessName}Service.list(Wrappers.<${ClassName}>lambdaQuery(${businessName}));
		return getTableData(list);
	}

	/**
     * Export${functionName}List
     */
	@RequiresPermissions("${moduleName}:${businessName}:export")
	@PostMapping("/export")
	@ResponseBody
	public ExcelDTO export(${ClassName} ${businessName}) {
		List<${ClassName}> list = ${businessName}Service.list(Wrappers.<${ClassName}>lambdaQuery(${businessName}));
		ExcelUtils<${ClassName}> util = new ExcelUtils<>(${ClassName}.class);
		return new ExcelDTO(util.exportExcel(list, "${businessName}"));
	}

	/**
     * Add${functionName}
     */
	@GetMapping("/add")
	public String add() {
		return prefix + "/add";
	}

	/**
     * Add save${functionName}
     */
	@RequiresPermissions("${moduleName}:${businessName}:add")
	@Log(title = "${functionName}", businessType = BusinessType.INSERT)
	@PostMapping("/add")
	@ResponseBody
	public void addSave(@Validated ${ClassName} ${businessName}) {
		${businessName}Service.save(${businessName});
	}

	/**
     * modify${functionName}
     */
	@GetMapping("/edit/{${pkColumn.javaField}}")
	public String edit(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}, ModelMap mmap) {
		${ClassName} ${businessName} = ${businessName}Service.getById(${pkColumn.javaField});
		mmap.put("${businessName}", ${businessName});
		return prefix + "/edit";
	}

	/**
     * Modify and save${functionName}
     */
	@RequiresPermissions("${moduleName}:${businessName}:edit")
	@Log(title = "${functionName}", businessType = BusinessType.UPDATE)
	@PostMapping("/edit")
	@ResponseBody
	public void editSave(@Validated ${ClassName} ${businessName}) {
		${businessName}Service.updateById(${businessName});
	}
	#set($pkColumnAttrName=$pkColumn.javaField.substring(0,1).toUpperCase() + ${pkColumn.javaField.substring(1)})

	/**
     * delete${functionName}
     */
	@RequiresPermissions("${moduleName}:${businessName}:remove")
	@Log(title = "${functionName}", businessType = BusinessType.DELETE)
	@PostMapping("/remove")
	@ResponseBody
	public void remove(String ids) {
		${businessName}Service.remove(Wrappers.<${ClassName}>lambdaQuery().in(${ClassName}::get${pkColumnAttrName}, StringUtils.split2List(ids)));
	}

}
